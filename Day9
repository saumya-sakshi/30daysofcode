Transfiguration (Level-Easy)
Professor McGonagall teaches transfiguration at Hogwarts. She has given Harry the task of changing himself into a cat. She explains that the trick is to analyze your own DNA and change it into the DNA of a cat. The transfigure spell can be used to pick any one character from the DNA string, remove it and insert it in the beginning.
Help Harry calculate the minimum number of times he needs to use the spell to change himself into a cat.
Example 1:
Input: 
A = "GEEKSFORGEEKS" 
B = "FORGEEKSGEEKS"
Output: 3
Explanation:The conversion can take place 
in 3 operations:
1. Pick 'R' and place it at the front, 
   A="RGEEKSFOGEEKS"
2. Pick 'O' and place it at the front, 
   A="ORGEEKSFGEEKS"
3. Pick 'F' and place it at the front, 
   A="FORGEEKSGEEKS"
Expected Time Complexity: O(max(|A|, |B|))
Expected Auxiliary Space: O(1)
Constraints:
1 ≤ |A|, |B| ≤ 10⁵
A and B consists of lowercase and uppercase letters of the English alphabet only.




Solution Code:-

class Solution
{
    int transfigure (String A, String B)
    {
    	// Your code goes here.
    	  
        // This parts checks whether conversion is 
        // possible or not 
        if(A.length() != B.length()) 
            return -1; 
          
        int i, j, res = 0; 
        int count [] = new int [256]; 
          
        // count characters in A 
          
        // subtract count for every character in B 
        for(i = 0; i < A.length(); i++) 
        { 
            count[A.charAt(i)]++; 
            count[B.charAt(i)]--; 
        } 
          
        // Check if all counts become 0 
        for(i = 0; i < 256; i++) 
            if(count[i] != 0) 
                return -1; 
          
        i = A.length() - 1; 
        j = B.length() - 1; 
  
        while(i >= 0) 
        { 
            // If there is a mismatch, then  
            // keep incrementing result 'res' 
            // until B[j] is not found in A[0..i] 
            if(A.charAt(i) != B.charAt(j)) 
                res++; 
            else
                j--; 
            i--;          
        } 
        return res;      
    }
}
