Coins of Geekland (level-Medium)
In Geekland there is a grid of coins of size N x N. You have to find the maximum sum of coins in any sub-grid of size K x K.
Note: Coins of the negative denomination are also possible at Geekland.
Example-1:
Input: N = 5, K = 3 
mat[[]] = {1, 1, 1, 1, 1} 
          {2, 2, 2, 2, 2} 
          {3, 8, 6, 7, 3} 
          {4, 4, 4, 4, 4} 
          {5, 5, 5, 5, 5}
Output: 48
Explanation: {8, 6, 7}
             {4, 4, 4}
             {5, 5, 5}
has the maximum sum
Expected Time Complexity: O(N2)
Expected Auxiliary Space: O(N2)
Constraints:
1 ≤ K ≤ N ≤ 103
-5*105 ≤ mat[i][j] ≤ 5*10⁵
Company Tag- Adobe
Solution Code:-

class Solution
{
    public int Maximum_Sum(int mat[][],int N,int k){
        

 
        int[][] sum = new int[N][N];
        sum[0][0] = mat[0][0];
 
        // pre-process first row
        for (int j = 1; j < N; j++) {
            sum[0][j] = mat[0][j] + sum[0][j - 1];
        }
 
        // pre-process first column
        for (int i = 1; i < N; i++) {
            sum[i][0] = mat[i][0] + sum[i - 1][0];
        }
 
        // pre-process rest of the matrix
        for (int i = 1; i < N; i++) {
            for (int j = 1; j < N; j++) {
                sum[i][j] = mat[i][j] + sum[i - 1][j] + sum[i][j - 1]
                            - sum[i - 1][j - 1];
            }
        }
 
        int total, max = Integer.MIN_VALUE;
      
 
        // find maximum sum sub-matrix
 
        // start from cell (k - 1, k - 1) and consider each
        // submatrix of size k x k
        for (int i = k - 1; i < N; i++)
        {
            for (int j = k - 1; j < N; j++)
            {
                // Note (i, j) is bottom right corner coordinates of
                // square sub-matrix of size k
 
                total = sum[i][j];
                if (i - k >= 0) {
                    total = total - sum[i - k][j];
                }
 
                if (j - k >= 0) {
                    total = total - sum[i][j - k];
                }
 
                if (i - k >= 0 && j - k >= 0) {
                    total = total + sum[i - k][j - k];
                }
 
                if (total > max) {
                    max = total;
                   
                }
            }
        }
 
   
        return max;
    }
}
