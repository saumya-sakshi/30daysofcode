Day 5 of geeks for geeks 30day of code:

Spiral Matrix (level-Medium)

Given a matrix of size N x M. You have to find the Kth element which will obtain while traversing the matrix spirally starting from the top-left corner of the matrix.
Example 1:
Input: 
N = 3, M = 3, K = 4
A[] = {{1, 2, 3}, 
       {4, 5, 6}, 
       {7, 8, 9}}
Output: 
6
Explanation: Spiral traversal of matrix: 
{1, 2, 3, 6, 9, 8, 7, 4, 5}. Fourth element
is 6.

Expected Time Complexity: O(N*M)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ K ≤ N*M ≤ 10^6

SOLUTION CODE:

class Solution
{
   
	public int findK(int a[][], int n, int m, int k)
	{
	    // Your code goes here
	    int top=0;
	    int left=0;
	    int right=m-1;
	    int bottom=n-1;
	    int dir =0;
	    
	    while(top<=bottom && left<=right){
	        if(dir==0){
	            for(int i=left;i<=right;i++){
	                k--;
	                if(k==0){
	                    return a[top][i];
	                }
	            }
	            top++;
	        }
	       else if(dir==1){
	            for(int i=top;i<=bottom;i++){
	                k--;
	                if(k==0){
	                    return a[i][right];
	                }
	            }
	            right--;
	        }
	        else if(dir==2){
	            for(int i=right;i>=left;i--){
	                k--;
	                if(k==0){
	                    return a[bottom][i];
	                }
	            }
	            bottom--;
	        }
	       else if(dir==3){
	            for(int i=bottom;i>=top;i--){
	                k--;
	                if(k==0){
	                    return a[i][left];
	                }
	            }
	            left++;
	        }
	        dir=(dir+1)%4;
	        
	    }
	    return -1;
	}
	
}
